{
  "tool_name": "tag_by_llm",
  "operation_type": "multi_label",
  "description": "Applies multiple relevant tags to text content using intelligent LLM semantic analysis. Perfect for content organization, search indexing, filtering, and multi-dimensional categorization where items can belong to several categories simultaneously. Supports batch tagging, tag limits, relevance thresholds, and confidence scoring. Unlike single-category classification, this tool can assign zero to many tags per input based on content relevance.",
  "category": "tagging",
  "version": "1.0.0",
  "model_config": {
    "provider": "openai",
    "model": "openai/gpt-4o-mini",
    "temperature": 0.0,
    "max_tokens": 200
  },
  "prompt_templates": {
    "system": "You are a tagging expert. Your task is to apply relevant tags from a predefined list to the given text.\n\nRules:\n- You can apply 0 to N tags per input\n- Only use tags from the provided list\n- Apply all tags that are relevant to the content\n- Return tags as a JSON array of strings\n- If no tags are relevant, return an empty array []",
    "user": "Available tags: {tags}\n\nText to tag:\n{text}\n\nRelevant tags (as JSON array):"
  },
  "parameters": {
    "input": {
      "type": "array",
      "description": "Array of text items to tag. Each item can be a string or an object with 'id' and 'data' fields. Supports articles, products, documents, user queries, or any content needing multi-label categorization.",
      "required": true
    },
    "tags": {
      "type": "array",
      "items": {"type": "string"},
      "description": "Complete list of available tag options to choose from (minimum 1 required). Tags are non-mutually exclusive - multiple tags can be applied to a single input. Use descriptive tag names like 'python', 'backend', 'api', 'machine-learning' for better semantic matching.",
      "minItems": 1,
      "required": true
    },
    "prompt": {
      "type": "string",
      "description": "Optional custom instructions to guide tagging behavior. Use this to specify tagging criteria, define tag meanings, or set relevance standards. Example: 'Only tag programming languages explicitly mentioned' or 'Focus on technical stack, not business domain'.",
      "required": false
    },
    "args": {
      "type": "object",
      "description": "Optional advanced configuration settings to control tagging behavior, limits, thresholds, and scoring.",
      "properties": {
        "model": {"type": "string", "description": "Override the default LLM model (gpt-4o-mini). Use more advanced models for nuanced tagging decisions or domain-specific content."},
        "temperature": {"type": "number", "description": "Control randomness in tag selection (0.0 = deterministic, higher = more exploratory). Default 0.0 for consistent, reproducible tagging."},
        "max_tags": {"type": "integer", "description": "Maximum number of tags to apply per input. Useful for limiting results to only the most relevant tags. If not set, all relevant tags are applied."},
        "min_relevance": {"type": "number", "description": "Minimum relevance threshold (0.0-1.0) for including a tag. Only tags scoring above this threshold will be applied. Higher values = stricter tag application."},
        "include_scores": {"type": "boolean", "default": false, "description": "When true, returns confidence scores (0-1) for each applied tag, indicating how relevant the model considers each tag to be."}
      },
      "required": false
    }
  },
  "output_format": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "id": {"type": ["integer", "string"]},
        "result": {
          "type": "array",
          "items": {
            "oneOf": [
              {"type": "string"},
              {
                "type": "object",
                "properties": {
                  "tag": {"type": "string"},
                  "score": {"type": "number"}
                }
              }
            ]
          }
        },
        "error": {"type": "string"}
      },
      "required": ["id", "result"]
    }
  },
  "examples": [
    {
      "description": "Basic tagging",
      "input": {
        "input": ["Python REST API", "React frontend app"],
        "tags": ["python", "javascript", "database", "backend", "frontend"]
      },
      "output": [
        {"id": 0, "result": ["python", "backend"]},
        {"id": 1, "result": ["javascript", "frontend"]}
      ]
    },
    {
      "description": "With scores and max tags",
      "input": {
        "input": [{"id": "proj_1", "data": "Full-stack web app"}],
        "tags": ["python", "javascript", "backend", "frontend", "database"],
        "args": {"max_tags": 2, "include_scores": true}
      },
      "output": [
        {
          "id": "proj_1",
          "result": [
            {"tag": "backend", "score": 0.9},
            {"tag": "frontend", "score": 0.85}
          ]
        }
      ]
    }
  ]
}
