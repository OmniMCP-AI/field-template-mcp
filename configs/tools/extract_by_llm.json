{
  "tool_name": "extract_by_llm",
  "operation_type": "extraction",
  "description": "Extracts structured data fields from unstructured text using advanced LLM semantic understanding and natural language processing. Ideal for parsing documents, forms, emails, articles, or any text to extract specific information like names, dates, amounts, entities, or custom fields. Supports simple field lists or complex JSON schemas with nested objects and arrays. Returns structured JSON output with automatic type handling and null values for missing data.",
  "category": "extraction",
  "version": "1.0.0",
  "model_config": {
    "provider": "openai",
    "model": "openai/gpt-4o-mini",
    "temperature": 0.0,
    "max_tokens": 1000
  },
  "prompt_templates": {
    "system": "You are a data extraction expert. Your task is to extract specific fields from unstructured text.\n\nRules:\n- Extract exactly the fields specified\n- If a field is not found, use null\n- Return result as JSON object with field names as keys\n- Be accurate and precise in extraction",
    "user": "Fields to extract: {fields}\n\nText:\n{text}\n\nExtracted data (as JSON):",
    "structured_system": "You are a data extraction expert. Extract information according to the provided schema.\n\nRules:\n- Follow the schema structure exactly\n- Use correct data types (string, number, array, object, boolean)\n- If a field is not found and not required, you may omit it or use null\n- Ensure all required fields are present"
  },
  "parameters": {
    "input": {
      "type": "array",
      "description": "Array of text items to extract data from. Each item can be a string or an object with 'id' and 'data' fields. Supports any unstructured text including documents, emails, forms, articles, chat transcripts, or web content.",
      "required": true
    },
    "fields": {
      "type": "array",
      "items": {"type": "string"},
      "description": "Simple list of field names to extract from the text (e.g., ['author', 'date', 'topic']). Use this for straightforward extractions where field names are self-explanatory. Required if 'response_format' is not provided. For complex nested structures, use 'response_format' instead.",
      "required": false
    },
    "response_format": {
      "type": "object",
      "description": "JSON Schema defining the exact structure of extracted data (OpenAI structured outputs compatible). Use this for complex extractions requiring specific types, nested objects, arrays, or validation rules. Must include 'type', 'properties', and optionally 'required' fields. Takes precedence over 'fields' parameter if both are provided.",
      "required": false
    },
    "args": {
      "type": "object",
      "description": "Optional advanced configuration settings to customize extraction behavior, model parameters, and processing options.",
      "properties": {
        "model": {"type": "string", "description": "Override the default LLM model (gpt-4o-mini). Use more advanced models for complex extractions, technical documents, or domain-specific content requiring deeper reasoning."},
        "temperature": {"type": "number", "description": "Control randomness in extraction (0.0 = deterministic, higher = more interpretive). Default 0.0 recommended for factual data extraction to ensure consistency."},
        "max_tokens": {"type": "integer", "description": "Maximum tokens for LLM response. Increase for documents with many fields or large extracted values. Default is 1000 tokens."},
        "prompt": {"type": "string", "description": "Custom instructions to guide extraction behavior. Use this to clarify field meanings, specify formats (e.g., 'dates in ISO 8601'), handle edge cases, or provide domain context. Example: 'Extract monetary amounts in USD only' or 'For author, use full name format'."}
      },
      "required": false
    }
  },
  "validation": {
    "oneOf_required": ["fields", "response_format"]
  },
  "output_format": {
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "id": {"type": ["integer", "string"]},
        "result": {"type": ["object", "null"]},
        "error": {"type": "string"}
      },
      "required": ["id"]
    }
  },
  "examples": [
    {
      "description": "Multi-field extraction",
      "input": {
        "input": ["Article by Wade on 2025-10-12 about AI"],
        "fields": ["author", "date", "topic"]
      },
      "output": [
        {
          "id": 0,
          "result": {"author": "Wade", "date": "2025-10-12", "topic": "AI"}
        }
      ]
    },
    {
      "description": "Structured output with arrays",
      "input": {
        "input": ["Article by Wade and Smith. Tags: AI, tech"],
        "response_format": {
          "type": "object",
          "properties": {
            "authors": {"type": "array", "items": {"type": "string"}},
            "tags": {"type": "array", "items": {"type": "string"}}
          },
          "required": ["authors"]
        }
      },
      "output": [
        {
          "id": 0,
          "result": {
            "authors": ["Wade", "Smith"],
            "tags": ["AI", "tech"]
          }
        }
      ]
    }
  ]
}
